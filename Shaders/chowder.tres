[gd_resource type="Shader" format=2]

[resource]
code = "shader_type canvas_item;

uniform sampler2D texR;
uniform sampler2D texG;
uniform sampler2D texB;

uniform vec2 movR;
uniform vec2 movG;
uniform vec2 movB;

uniform vec2 tileR;
uniform vec2 tileG;
uniform vec2 tileB;

uniform bool waveR;
uniform bool waveG;
uniform bool waveB;

void fragment() {
	vec4 base = texture(TEXTURE, UV);
	
	vec2 uvR = SCREEN_UV * tileR;
	vec2 uvG = SCREEN_UV * tileG;
	vec2 uvB = SCREEN_UV * tileB;
		
	vec2 offsetR = waveR ? sin(TIME) * movR : TIME * movR;
	vec2 offsetG = waveG ? sin(TIME) * movG : TIME * movG;
	vec2 offsetB = waveB ? sin(TIME) * movB : TIME * movB;
		
	vec3 Rcolor = texture(texR, uvR + offsetR).rgb * base.r;
	vec3 Gcolor = texture(texG, uvG + offsetG).rgb * base.g;
	vec3 Bcolor = texture(texB, uvB + offsetB).rgb * base.b;
	
	vec4 black_only = base;
	black_only.r = 0.0;
	black_only.g = 0.0;
	black_only.b = 0.0;
	
	vec3 temp = Rcolor + Gcolor + Bcolor;
	
	base.r = temp.r;
	base.g = temp.g;
	base.b = temp.b;
	
	COLOR = base;
}"
